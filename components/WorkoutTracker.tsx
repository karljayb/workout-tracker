"use client";

import React, { useState } from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from "@/components/ui/button";
import { PlusCircle, Trash2, Download, Upload, RefreshCw, ChevronDown, ChevronUp } from 'lucide-react';
import { useWorkout } from '@/contexts/WorkoutContext';
import { useToast } from '@/components/ui/toast';
import { format, parseISO } from 'date-fns';
import { 
  validateRunningEntry, 
  validateStrengthWorkout,
  validateExercise,
  ValidationErrors 
} from '@/lib/validation';

interface NewRunningEntry {
  date: string;
  distance: string;
  time: string;
  notes: string;
}

interface NewExercise {
  exercise: string;
  reps: string;
  duration?: string;
  weight: string;
}

interface ExerciseEntry {
  exercise: string;
  reps: string | "duration";
  duration?: string;
  weight: string | "N/A";
}

interface NewStrengthWorkout {
  date: string;
  duration: string;
}

const WorkoutTracker: React.FC = () => {
  const { workoutData, dispatch, exportData, importData, resetData } = useWorkout();
  const { success, error: showError } = useToast();
  
  // Running state
  const [newRunning, setNewRunning] = useState<NewRunningEntry>({
    date: '',
    distance: '',
    time: '',
    notes: ''
  });
  
  // Strength workout state
  const [newStrengthWorkout, setNewStrengthWorkout] = useState<NewStrengthWorkout>({
    date: '',
    duration: ''
  });

  const [currentExercise, setCurrentExercise] = useState<NewExercise>({
    exercise: '',
    reps: '',
    duration: '',
    weight: ''
  });

  const [isWeightNA, setIsWeightNA] = useState(false);
  const [tempExercises, setTempExercises] = useState<ExerciseEntry[]>([]);
  const [expandedWorkouts, setExpandedWorkouts] = useState<string[]>([]);
  const [validationErrors, setValidationErrors] = useState<ValidationErrors>({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Derived state
  const isDurationBasedExercise = currentExercise.exercise === "Plank";

  // Running functions
  const addRunningWorkout = () => {
    const errors = validateRunningEntry(newRunning);
    setValidationErrors(errors);
  
    if (Object.keys(errors).length === 0) {
      setIsSubmitting(true);
      try {
        dispatch({
          type: 'ADD_RUNNING',
          payload: newRunning
        });
        setNewRunning({ date: '', distance: '', time: '', notes: '' });
        success('Running workout added successfully');
      } catch {
        showError('Failed to add running workout');
      } finally {
        setIsSubmitting(false);
      }
    }
  };

  // Strength workout functions
  const addExerciseToTemp = () => {
    const exerciseToAdd: ExerciseEntry = {
      exercise: currentExercise.exercise,
      reps: isDurationBasedExercise ? "duration" : currentExercise.reps,
      duration: isDurationBasedExercise ? currentExercise.duration : undefined,
      weight: isWeightNA ? "N/A" : currentExercise.weight
    };

    const errors = validateExercise(exerciseToAdd, isWeightNA);
    setValidationErrors(errors);

    if (Object.keys(errors).length === 0) {
      setTempExercises([...tempExercises, exerciseToAdd]);
      setCurrentExercise({ 
        exercise: '', 
        reps: '', 
        duration: '', 
        weight: '' 
      });
      setIsWeightNA(false);
      success('Exercise added to workout');
    }
  };

  const saveStrengthWorkout = () => {
    const errors = validateStrengthWorkout(newStrengthWorkout.date, newStrengthWorkout.duration);
    setValidationErrors(errors);

    if (Object.keys(errors).length === 0 && tempExercises.length > 0) {
      setIsSubmitting(true);
      try {
        dispatch({
          type: 'ADD_STRENGTH_WORKOUT',
          payload: {
            id: '', // Will be generated by reducer
            date: newStrengthWorkout.date,
            duration: newStrengthWorkout.duration,
            exercises: tempExercises
          }
        });
        setNewStrengthWorkout({ date: '', duration: '' });
        setTempExercises([]);
        success('Strength workout saved successfully');
      } catch {
        showError('Failed to save strength workout');
      } finally {
        setIsSubmitting(false);
      }
    } else if (tempExercises.length === 0) {
      showError('Add at least one exercise to the workout');
    }
  };

  const removeTempExercise = (index: number) => {
    setTempExercises(exercises => exercises.filter((_, i) => i !== index));
  };

  const toggleWorkoutExpansion = (workoutId: string) => {
    setExpandedWorkouts(expanded => 
      expanded.includes(workoutId)
        ? expanded.filter(id => id !== workoutId)
        : [...expanded, workoutId]
    );
  };

  // File handling functions
  const handleFileImport = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      try {
        const reader = new FileReader();
        reader.onload = (e) => {
          try {
            importData(e.target?.result as string);
            success('Data imported successfully');
          } catch {
            showError('Error importing data. Please check the file format.');
          }
        };
        reader.readAsText(file);
      } catch {
        showError('Failed to read file');
      }
    }
  };

  return (
    <div className="space-y-6">
      {/* Action Buttons */}
      <div className="flex justify-end gap-2 mb-4">
        <Button onClick={exportData} className="flex items-center">
          <Download className="w-4 h-4 mr-2" /> Export
        </Button>
        <label className="flex">
          <input
            type="file"
            accept=".json"
            onChange={handleFileImport}
            className="hidden"
          />
          <Button asChild className="flex items-center">
            <span><Upload className="w-4 h-4 mr-2" /> Import</span>
          </Button>
        </label>
        <Button variant="destructive" onClick={resetData} className="flex items-center">
          <RefreshCw className="w-4 h-4 mr-2" /> Reset
        </Button>
      </div>

      {/* Running Section */}
      <Card>
        <CardHeader>
          <CardTitle>Running Progress</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="grid grid-cols-5 gap-2">
              <div className="space-y-1">
                <input
                  type="date"
                  placeholder="DD/MM/YYYY"
                  value={newRunning.date}
                  onChange={(e) => {
                    setNewRunning(prev => ({...prev, date: e.target.value}));
                    setValidationErrors(prev => ({...prev, date: undefined}));
                  }}
                  className={`border p-2 rounded w-full ${
                    validationErrors.date ? 'border-red-500' : ''
                  }`}
                />
                {validationErrors.date && (
                  <p className="text-xs text-red-500">{validationErrors.date}</p>
                )}
              </div>

              <div className="space-y-1">
                <input
                  type="number"
                  value={newRunning.distance}
                  onChange={(e) => {
                    setNewRunning(prev => ({...prev, distance: e.target.value}));
                    setValidationErrors(prev => ({...prev, distance: undefined}));
                  }}
                  className={`border p-2 rounded w-full ${
                    validationErrors.distance ? 'border-red-500' : ''
                  }`}
                  placeholder="Distance (km)"
                />
                {validationErrors.distance && (
                  <p className="text-xs text-red-500">{validationErrors.distance}</p>
                )}
              </div>

              <div className="space-y-1">
                <input
                  type="text"
                  value={newRunning.time}
                  onChange={(e) => {
                    setNewRunning(prev => ({...prev, time: e.target.value}));
                    setValidationErrors(prev => ({...prev, time: undefined}));
                  }}
                  className={`border p-2 rounded w-full ${
                    validationErrors.time ? 'border-red-500' : ''
                  }`}
                  placeholder="Time (mm:ss)"
                />
                {validationErrors.time && (
                  <p className="text-xs text-red-500">{validationErrors.time}</p>
                )}
              </div>

              <div className="space-y-1">
                <input
                  type="text"
                  value={newRunning.notes || ''}
                  onChange={(e) => {
                    setNewRunning(prev => ({...prev, notes: e.target.value}));
                  }}
                  className="border p-2 rounded w-full"
                  placeholder="Notes (optional)"
                />
              </div>

              <Button 
                onClick={addRunningWorkout}
                className="flex items-center"
                disabled={isSubmitting}
              >
                <PlusCircle className="w-4 h-4 mr-2" />
                Add Run
              </Button>
            </div>

            {/* Running Table */}
            <div className="mt-4">
            <table className="w-full">
              <thead>
                <tr>
                  <th className="text-left p-2">Date</th>
                  <th className="text-left p-2">Distance (km)</th>
                  <th className="text-left p-2">Time</th>
                  <th className="text-left p-2">Notes</th>
                  <th className="text-left p-2">Actions</th>
                </tr>
              </thead>
              <tbody>
                {workoutData.running.map((run, index) => (
                  <tr key={index} className="border-t">
                    <td className="p-2">{format(parseISO(run.date), 'dd/MM/yyyy')}</td>
                    <td className="p-2">{run.distance}</td>
                    <td className="p-2">{run.time}</td>
                    <td className="p-2">{run.notes}</td>
                    <td className="p-2">
                      <Button 
                        variant="destructive"
                        size="icon"
                        onClick={() => dispatch({ type: 'DELETE_RUNNING', payload: index })}
                        className="h-8 w-8"
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Strength Section */}
      <Card>
        <CardHeader>
          <CardTitle>Strength Training Progress</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-6">
            {/* New Workout Form */}
            <div className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-1">
                  <input
                    type="date"
                    placeholder="DD/MM/YYYY"
                    value={newStrengthWorkout.date}
                    onChange={(e) => {
                      setNewStrengthWorkout(prev => ({...prev, date: e.target.value}));
                      setValidationErrors(prev => ({...prev, date: undefined}));
                    }}
                    className={`border p-2 rounded w-full ${
                      validationErrors.date ? 'border-red-500' : ''
                    }`}
                  />
                  {validationErrors.date && (
                    <p className="text-xs text-red-500">{validationErrors.date}</p>
                  )}
                </div>
                <div className="space-y-1">
                  <input
                    type="text"
                    value={newStrengthWorkout.duration}
                    onChange={(e) => {
                      setNewStrengthWorkout(prev => ({...prev, duration: e.target.value}));
                      setValidationErrors(prev => ({...prev, duration: undefined}));
                    }}
                    className={`border p-2 rounded w-full ${
                      validationErrors.duration ? 'border-red-500' : ''
                    }`}
                    placeholder="Duration (mm:ss)"
                  />
                  {validationErrors.duration && (
                    <p className="text-xs text-red-500">{validationErrors.duration}</p>
                  )}
                </div>
              </div>

              {/* Exercise Form */}
              <div className="grid grid-cols-5 gap-2">
                <select
                  value={currentExercise.exercise}
                  onChange={(e) => {
                    setCurrentExercise(prev => ({
                      ...prev, 
                      exercise: e.target.value,
                      // Reset reps/duration when switching exercise types
                      reps: '',
                      duration: ''
                    }));
                    setValidationErrors(prev => ({...prev, exercise: undefined}));
                  }}
                  className={`border p-2 rounded ${
                    validationErrors.exercise ? 'border-red-500' : ''
                  }`}
                >
                  <option value="">Select Exercise</option>
                  <option value="Pushups">Pushups</option>
                  <option value="Situps">Situps</option>
                  <option value="Squats">Squats</option>
                  <option value="Bicep Curls">Bicep Curls</option>
                  <option value="Tricep Extensions">Tricep Extensions</option>
                  <option value="Lunges">Lunges</option>
                  <option value="Plank">Plank</option>
                </select>

                {isDurationBasedExercise ? (
                  <input
                    type="number"
                    value={currentExercise.duration || ''}
                    onChange={(e) => {
                      setCurrentExercise(prev => ({...prev, duration: e.target.value}));
                      setValidationErrors(prev => ({...prev, duration: undefined}));
                    }}
                    className={`border p-2 rounded ${
                      validationErrors.duration ? 'border-red-500' : ''
                    }`}
                    placeholder="Duration (seconds)"
                  />
                ) : (
                  <input
                    type="number"
                    value={currentExercise.reps}
                    onChange={(e) => {
                      setCurrentExercise(prev => ({...prev, reps: e.target.value}));
                      setValidationErrors(prev => ({...prev, reps: undefined}));
                    }}
                    className={`border p-2 rounded ${
                      validationErrors.reps ? 'border-red-500' : ''
                    }`}
                    placeholder="Reps"
                  />
                )}

                <input
                  type="number"
                  value={isWeightNA ? '' : currentExercise.weight}
                  onChange={(e) => {
                    setCurrentExercise(prev => ({...prev, weight: e.target.value}));
                    setValidationErrors(prev => ({...prev, weight: undefined}));
                  }}
                  className={`border p-2 rounded ${
                    validationErrors.weight ? 'border-red-500' : ''
                  }`}
                  placeholder="Weight (kg)"
                  disabled={isWeightNA}
                />

                <div className="flex items-center gap-2">
                  <input
                    type="checkbox"
                    checked={isWeightNA}
                    onChange={(e) => {
                      setIsWeightNA(e.target.checked);
                      if (e.target.checked) {
                        setCurrentExercise(prev => ({...prev, weight: ''}));
                      }
                    }}
                    className="h-4 w-4"
                  />
                  <span className="text-sm">N/A</span>
                </div>

                <Button 
                  onClick={addExerciseToTemp}
                  className="flex items-center"
                  disabled={isSubmitting}
                >
                  <PlusCircle className="w-4 h-4 mr-2" />
                  Add Exercise
                </Button>
              </div>

              {/* Temporary Exercise List */}
              {tempExercises.length > 0 && (
                <div className="mt-4">
                  <h4 className="font-medium mb-2">Current Workout Exercises:</h4>
                  <div className="bg-secondary/50 rounded-lg p-4">
                  <table className="w-full">
                  <thead>
                    <tr>
                      <th className="text-left">Exercise</th>
                      <th className="text-left">Reps/Duration</th>
                      <th className="text-left">Weight</th>
                      <th className="text-left">Actions</th>
                    </tr>
                  </thead>
                  <tbody>
                    {tempExercises.map((exercise, index) => (
                      <tr key={index} className="border-t border-secondary-foreground/20">
                        <td className="py-2">{exercise.exercise}</td>
                        <td className="py-2">
                          {exercise.exercise === "Plank" 
                            ? `${exercise.duration}s`
                            : exercise.reps + " reps"
                          }
                        </td>
                        <td className="py-2">{exercise.weight}</td>
                            <td className="py-2">
                              <Button
                                variant="destructive"
                                size="icon"
                                onClick={() => removeTempExercise(index)}
                                className="h-8 w-8"
                              >
                                <Trash2 className="h-4 w-4" />
                              </Button>
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                  <Button 
                    onClick={saveStrengthWorkout}
                    className="mt-4"
                    disabled={isSubmitting}
                  >
                    Save Workout
                  </Button>
                </div>
              )}
            </div>

            {/* Saved Workouts List */}
            <div className="mt-6">
              <h4 className="font-medium mb-2">Saved Workouts:</h4>
              <div className="space-y-4">
                {workoutData.strengthWorkouts.map((workout) => (
                  <div key={workout.id} className="border rounded-lg">
                    <div 
                      className="flex justify-between items-center p-4 cursor-pointer"
                      onClick={() => toggleWorkoutExpansion(workout.id)}
                    >
                      <div>
                      <span className="font-medium">
                        {format(parseISO(workout.date), 'dd/MM/yyyy')}
                      </span>
                        {workout.duration && (
                          <span className="ml-4 text-muted-foreground">
                            Duration: {workout.duration}
                          </span>
                        )}
                      </div>
                      <div className="flex items-center gap-2">
                        <Button
                          variant="destructive"
                          size="icon"
                          onClick={(e) => {
                            e.stopPropagation();
                            dispatch({ type: 'DELETE_STRENGTH_WORKOUT', payload: workout.id });
                          }}
                          className="h-8 w-8"
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                        {expandedWorkouts.includes(workout.id) ? (
                          <ChevronUp className="h-4 w-4" />
                        ) : (
                          <ChevronDown className="h-4 w-4" />
                        )}
                      </div>
                    </div>

                    {expandedWorkouts.includes(workout.id) && (
                      <div className="border-t p-4">
                        <table className="w-full">
                          <thead>
                            <tr>
                              <th className="text-left">Exercise</th>
                              <th className="text-left">Reps/Duration</th>
                              <th className="text-left">Weight</th>
                              <th className="text-left">Actions</th>
                            </tr>
                          </thead>
                          <tbody>
                            {workout.exercises.map((exercise, index) => (
                              <tr key={index} className="border-t">
                                <td className="py-2">{exercise.exercise}</td>
                                <td className="py-2">
                                  {exercise.exercise === "Plank" 
                                    ? `${exercise.duration}s`
                                    : exercise.reps + " reps"
                                  }
                                </td>
                                <td className="py-2">{exercise.weight}</td>
                                <td className="py-2">
                                  <Button
                                    variant="destructive"
                                    size="icon"
                                    onClick={() => {
                                      dispatch({
                                        type: 'DELETE_EXERCISE_FROM_WORKOUT',
                                        payload: { workoutId: workout.id, exerciseIndex: index }
                                      });
                                    }}
                                    className="h-8 w-8"
                                  >
                                    <Trash2 className="h-4 w-4" />
                                  </Button>
                                </td>
                              </tr>
                            ))}
                          </tbody>
                        </table>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default WorkoutTracker;